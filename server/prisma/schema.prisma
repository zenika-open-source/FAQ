generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id          String       @id @db.VarChar(25)
  content     String
  createdAt   DateTime
  updatedAt   DateTime
  language    String
  certified   String?
  translationId String?
  translation Translation? @relation(fields: [translationId], references: [id], name: "AnswerTranslation")
  sources     Source[]
  nodeId      String       @unique
  node        ZNode        @relation(fields: [nodeId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id])
}

model Configuration {
  id                              String                            @id @db.VarChar(25)
  name                            String                            @unique(map: "default$default.Configuration.name._UNIQUE")
  title                           String
  auth0Domain                     String
  auth0ClientId                   String
  algoliaAppId                    String?
  algoliaApiKey                   String?
  algoliaSynonyms                 String?
  mailgunDomain                   String?
  mailgunApiKey                   String?
  slackChannelHook                String?
  slackCommandKey                 String?
  tags                            String?
  workplaceSharing                Boolean?
  bugReporting                    String?
  updatedAt                       DateTime
  createdAt                       DateTime
  authorizedDomains               AuthorizedDomains[]
  tagCategories                   TagCategory[]
}

model AuthorizedDomains {
  nodeId        String        @db.VarChar(25)
  position      Int
  value         String
  configuration Configuration @relation(fields: [nodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([nodeId, position])
}

model Flag {
  id        String   @id @db.VarChar(25)
  type      String
  createdAt DateTime
  updatedAt DateTime
  nodeId    String
  node      ZNode  @relation(fields: [nodeId], references: [id])
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model HistoryAction {
  id        String   @id @db.VarChar(25)
  action    String
  model     String
  meta      String?
  createdAt DateTime
  updatedAt DateTime
  nodeId    String
  node      ZNode  @relation(fields: [nodeId], references: [id])
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model Question {
  id          String       @id @db.VarChar(25)
  title       String
  slug        String
  views       Int?
  createdAt   DateTime
  updatedAt   DateTime
  language    String
  translationId String?
  translation Translation? @relation(fields: [translationId], references: [id], name: "QuestionTranslation")
  nodeId    String @unique
  node      ZNode  @relation(fields: [nodeId], references: [id])
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model Source {
  id        String   @id @db.VarChar(25)
  label     String
  url       String
  updatedAt DateTime
  createdAt DateTime
  answerId  String
  answer    Answer @relation(fields: [answerId], references: [id])
}

model Tag {
  id        String     @id @db.VarChar(25)
  createdAt DateTime
  updatedAt DateTime
  nodeId    String
  node     ZNode    @relation(fields: [nodeId], references: [id])
  labelId String
  label  TagLabel @relation(fields: [labelId], references: [id])
  userId  String
  user      User     @relation(fields: [userId], references: [id])
}

model TagCategory {
  id            String          @id @db.VarChar(25)
  name          String
  order         Int
  updatedAt     DateTime
  createdAt     DateTime
  configurationId String
  configuration Configuration @relation(fields: [configurationId], references: [id])
  labels      TagLabel[]
}

model TagLabel {
  id          String        @id @db.VarChar(25)
  name        String
  order       Int
  createdAt   DateTime
  updatedAt   DateTime
  categoryId  String
  category    TagCategory    @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  specialists User[]
}

model Translation {
  id       String     @id @db.VarChar(25)
  language String
  text     String
  question  Question @relation(name: "QuestionTranslation")
  answer    Answer @relation(name: "AnswerTranslation")
}

model User {
  id            String          @id @db.VarChar(25)
  auth0Id       String?         @unique(map: "default$default.User.auth0Id._UNIQUE")
  key           String?
  admin         Boolean
  name          String?
  email         String?
  picture       String?
  locale        String?
  createdAt     DateTime
  updatedAt     DateTime
  Answer        Answer[]
  flags         Flag[]
  history       HistoryAction[]
  questions     Question[]
  specialties   TagLabel[]
  tags          Tag[]
}

model ZNode {
  id            String          @id @db.VarChar(25)
  highlights    String?
  updatedAt     DateTime
  createdAt     DateTime
  answer        Answer
  flags          Flag[]
  history HistoryAction[]
  question      Question
  tags           Tag[]
}
