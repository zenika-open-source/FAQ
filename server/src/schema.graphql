# import ZNode, Question, Answer, Source, Flag, TagLabel, TagCategory, HistoryAction, BugReporting from './generated/prisma.graphql'

# import ZNodeOrderByInput, ZNodeConnection, ZNodeWhereUniqueInput from './generated/prisma.graphql'
# import HistoryActionWhereInput from './generated/prisma.graphql'

directive @admin on QUERY | FIELD_DEFINITION

type Query {
  me: User
  users: [User!]

  zNode(where: ZNodeWhereUniqueInput): ZNode

  history(
    where: HistoryActionWhereInput
    orderBy: HistoryActionOrderByInput
    first: Int!
    skip: Int!
  ): History

  search(
    text: String
    tags: [String!]
    flags: [String!]
    orderBy: ZNodeOrderByInput
    first: Int!
    skip: Int!
  ): SearchResult!

  randomNode(tag: String): ZNode

  configuration: Configuration @admin
}

type Mutation {
  updateMe(name: String!, email: String!, picture: String!): User
  forgetMe: User
  authenticate(idToken: String!): User
  updateSpecialties(id: ID!, specialties: [SpecialtiesInput]!): User

  createQuestionAndTags(
    title: String!
    language: String!
    translation: String!
    tags: [ID!]!
  ): Question
  updateQuestionAndTags(
    id: ID!
    title: String!
    previousTitle: String!
    language: String!
    translation: String!
    tags: [ID!]!
  ): Question
  incrementQuestionViewsCounter(id: ID!): Question

  createAnswerAndSources(
    content: String
    language: String!
    translation: String!
    sources: String!
    nodeId: ID!
  ): Answer
  updateAnswerAndSources(
    id: ID!
    content: String
    previousContent: String!
    language: String!
    translation: String!
    sources: String!
  ): Answer

  addFlag(type: String!, nodeId: ID!): ZNode
  removeFlag(type: String!, nodeId: ID!): ZNode

  updateConfiguration(
    title: String!
    tagCategories: Json!
    algoliaSynonyms: Json!
    workplaceSharing: Boolean!
    authorizedDomains: [String!]!
    bugReporting: BugReporting!
    slackChannelHook: String
  ): Configuration @admin
  regenerateSlackCommandKey: Configuration! @admin
}

type SearchResult {
  nodes: [ZNode!]!
  meta: PaginationMeta!
}

type History {
  historyActions: [HistoryAction!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  entriesCount: Int!
  pageCurrent: Int!
  pagesCount: Int!
}

type User {
  id: ID!
  auth0Id: String
  admin: Boolean

  name: String
  email: String

  picture: String
  specialties: [TagLabel!]
}

type Configuration {
  id: ID!

  title: String!

  auth0Domain: String!
  auth0ClientId: String!
  authorizedDomains: [String!]

  algoliaAppId: String @admin
  algoliaApiKey: String @admin
  algoliaSynonyms: Json

  slackChannelHook: String @admin
  slackCommandKey: String @admin

  tags: Json
  tagCategories: [TagCategory!]!
  # TMP_TAGS

  workplaceSharing: Boolean

  bugReporting: BugReporting
}

input SpecialtiesInput {
  id: ID
  name: String
}
